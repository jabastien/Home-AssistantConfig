#!/bin/sh
# this is only for documentation
#
# export empty username / password if you use a master_token
# DEVICE_ID is name of the device you want a short-lived-token for
#
#   The client generates tokens that can be used when
#   making requests to the Google Home API.
#   There are 3 kinds of tokens used here:
#
#   1. Master token - Is in the form `aas_et/***` and is long lived.
#      Needs Google username and password.
#   2. Access token - Is in the form `ya29.***` and lasts for an hour.
#      Needs Master token to generate.
#   3. Local authentication tokens - Are individual google device local
#   authentication tokens used to send requests to specific google assistant
#   devidevices
#
#   If you do not want to store the Google account password in plaintext,
#   get the master token once, and set it as an override value.
#
#   It's safer/easier to generate an app password and
#   use it instead of the actual password.
#   It still has the same access as the regular password,
#   but still better than using the real password while scripting.
#   (https://myaccount.google.com/apppasswords)

export GOOGLE_PASSWORD=""
export GOOGLE_USERNAME=""
export DEVICE_ID="Google Nest Hub"
export GOOGLE_MASTER_TOKEN="0000000000"
export HASSIO_DIR = "/path/to/homeassistant/"
# never run code directly from the web; I do this for documentation purposes
# following command downloads a python-script from github and extracts 
# a shortlived token for a google device wich I then can use to interact with homeassistant

curl -s https://raw.githubusercontent.com/phixion/scripts/master/google-local-api/tools/get_tokens.py | python3 - | jq -r \
'.[] | select(.device_name == "Google Nest Hub")| {local_auth_token} | .[]' \
> $HASSIO_DIR/nogit_scripts/token.google
