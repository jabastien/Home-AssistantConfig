esphome:
  name: nodemcu7
  platform: ESP32
  board: esp-wrover-kit
  includes:
    - include_set.h
  on_boot:
    priority: 801
    then:
      - lambda: |
          id(ids_seen) = new std::set<std::string>();
globals:
  - id: ids_seen
    type: void*
    restore_value: no
substitutions:
  devicename: nodemcu7
  friendly_name: Nodemcu 7
  room: Wohnzimmer
  update_interval_short: 2min
  update_interval_long: 10min
time: !include shared/time.yaml
wifi: !include shared/wifi.yaml
api: !include shared/api.yaml
ota: !include shared/ota.yaml
web_server: !include shared/webserver.yaml
captive_portal:
logger:
sensor:
  - platform: template
    name: ${friendly_name} (${room}) BLE Sensor
    id: ble_sensor
  - platform: template
    name: "Corona App User (15min)"
    update_interval: 300s
    unit_of_measurement: User
    accuracy_decimals: 0
    lambda: !lambda |-
        auto idset = (std::set<std::string>*)id(ids_seen);
        auto count = idset->size();
        idset->clear();
        return count;
  - platform: wifi_signal
    name: ${friendly_name} (${room}) WiFi Signal
    update_interval: ${update_interval_long}
    unit_of_measurement: dB
    icon: mdi:wifi
    force_update: true
  - platform: uptime
    force_update: true
    id: ${devicename}_uptime
    internal: true
    update_interval: ${update_interval_long}
text_sensor:
  - platform: version
    name: ${friendly_name} (${room}) Version
    icon: "mdi:car-esp"
    on_value:
      then:
        - lambda: |-
            ESP_LOGD("main", "The current version is %s", x.c_str());
  - platform: wifi_info
    ip_address:
      name: ${friendly_name} (${room}) IP Address
      icon: mdi:wifi
    ssid:
      name: ${friendly_name} (${room}) SSID
      icon: mdi:wifi
    bssid:
      name: ${friendly_name} (${room}) BSSID
      icon: mdi:wifi
  - platform: template
    name: ${friendly_name} (${room}) Uptime
    lambda: |-
      uint32_t dur = id(${devicename}_uptime).state;
      int dys = 0;
      int hrs = 0;
      int mnts = 0;
      if (dur > 86399) {
        dys = trunc(dur / 86400);
        dur = dur - (dys * 86400);
      }
      if (dur > 3599) {
        hrs = trunc(dur / 3600);
        dur = dur - (hrs * 3600);
      }
      if (dur > 59) {
        mnts = trunc(dur / 60);
        dur = dur - (mnts * 60);
      }
      char buffer[17];
      sprintf(buffer, "%ud %02uh %02um %02us", dys, hrs, mnts, dur);
      return {buffer};
    icon: mdi:clock-start
    update_interval: ${update_interval_long}
  - platform: template
    name: ${friendly_name} (${room}) MAC Address
    lambda: "return {WiFi.macAddress().c_str()};"
    icon: mdi:fingerprint
  - platform: template
    id: latest_coronamelder_detected
    name: Corona App User
binary_sensor:
  - platform: status
    device_class: connectivity
    name: ${friendly_name} (${room}) Status
  - platform: ble_presence
    id: mibandpresence
    mac_address: !secret blemac_0
    name: "Mi Intelliband 4"
    device_class: presence
  - platform: ble_presence
    id: nexuspresence
    mac_address: !secret blemac_1
    name: "Google Nexus"
    device_class: presence
switch:
  - platform: restart
    name: ${friendly_name} (${room}) Restart
esp32_ble_tracker:
  on_ble_advertise:
    - mac_address: !secret blemac_0
      then:
        - lambda: |-
            ESP_LOGD("ble_adv", "New BLE device");
            ESP_LOGD("ble_adv", "  address: %s", x.address_str().c_str());
            ESP_LOGD("ble_adv", "  name: %s", x.get_name().c_str());
            ESP_LOGD("ble_adv", "  Advertised service UUIDs:");
            for (auto uuid : x.get_service_uuids()) {
                ESP_LOGD("ble_adv", "    - %s", uuid.to_string().c_str());
            }
            ESP_LOGD("ble_adv", "  Advertised service data:");
            for (auto data : x.get_service_datas()) {
                ESP_LOGD("ble_adv", "    - %s: (length %i)", data.uuid.to_string().c_str(), data.data.size());
            }
            ESP_LOGD("ble_adv", "  Advertised manufacturer data:");
            for (auto data : x.get_manufacturer_datas()) {
                ESP_LOGD("ble_adv", "    - %s: (length %i)", data.uuid.to_string().c_str(), data.data.size());
            }
exposure_notifications:
  on_exposure_notification:
    then:
      - if:
          condition:
            lambda: |
              auto ids_seen_set = (std::set<std::string>*)id(ids_seen);
              auto id_as_str = hexencode(x.rolling_proximity_identifier);
              if( !ids_seen_set->count( id_as_str ) )
              {
                ids_seen_set->insert(id_as_str);
                ESP_LOGD("main", "Got new notification:");
                ESP_LOGD("main", "  RPI: %s", id_as_str.c_str() );
                ESP_LOGD("main", "  RSSI: %d", x.rssi);
                return true;
              }
              else
              {
                ESP_LOGD("main", "Got existing notification:");
                ESP_LOGD("main", "  RPI: %s", id_as_str.c_str() );
                return false;
              }
          then:
            - text_sensor.template.publish:
                id: latest_coronamelder_detected
                state: !lambda "return hexencode(x.rolling_proximity_identifier).c_str();"
